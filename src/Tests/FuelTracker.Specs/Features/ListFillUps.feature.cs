// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FuelTracker.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("List Fillups")]
    public partial class ListFillupsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ListFillUps.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "List Fillups", "In order to keep track of my vehicle\'s consumption\r\nAs a car owner\r\nI want to be " +
                    "able to list my fillups", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("List fillups with only one fillup")]
        public virtual void ListFillupsWithOnlyOneFillup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List fillups with only one fillup", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "OdometerReading",
                        "1000"});
            table1.AddRow(new string[] {
                        "Gallons",
                        "20"});
            table1.AddRow(new string[] {
                        "TotalCost",
                        "4000"});
#line 7
 testRunner.Given("I added the following fillup", ((string)(null)), table1, "Given ");
#line 12
 testRunner.When("I list my fillups", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "OdometerReading",
                        "Gallons",
                        "TotalCost",
                        "PricePerGallon"});
            table2.AddRow(new string[] {
                        "1000",
                        "20",
                        "4000",
                        "200"});
#line 13
 testRunner.Then("I should see the following fillups", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("List fillups with two fillups")]
        public virtual void ListFillupsWithTwoFillups()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List fillups with two fillups", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "OdometerReading",
                        "1000"});
            table3.AddRow(new string[] {
                        "Gallons",
                        "20"});
            table3.AddRow(new string[] {
                        "TotalCost",
                        "4000"});
#line 18
 testRunner.Given("I added the following fillup", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "OdometerReading",
                        "1100"});
            table4.AddRow(new string[] {
                        "Gallons",
                        "10"});
            table4.AddRow(new string[] {
                        "TotalCost",
                        "2000"});
#line 23
 testRunner.Given("I added the following fillup", ((string)(null)), table4, "Given ");
#line 28
 testRunner.When("I list my fillups", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "OdometerReading",
                        "Gallons",
                        "TotalCost",
                        "PricePerGallon"});
            table5.AddRow(new string[] {
                        "1000",
                        "20",
                        "4000",
                        "200"});
            table5.AddRow(new string[] {
                        "1100",
                        "10",
                        "2000",
                        "200"});
#line 29
 testRunner.Then("I should see the following fillups", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
